01_07_16

Processes
	-	Resource Management
		-	how do you use the resources?

First generation: direct input

2nd generation: batch computing

Spooling
	-	overlap I/O of one jobe with execution of another

3rd generation
	-	multiprogramming
	-	absolute addressing -> relative addressing
	-	relocation

Memory

Timesharing
	-	allow several jobs to be active at one time
	-	quick turnaround -> quick fixes for problems

Modern Operating Systems

Storage pyramid
	-	need to take cost into account

Device Request
	-	

Operating systems concepts
	-	Processes
	-	Deadlock
	-	Process interaction
	-	File systems and directory trees
	-	pipes

Inside a (Unix) process
	-	Processes have three segments
		-	text: program code
		-	Data: program data
			-	statically declared variables
			-	areas allocated by malloc() or new
		-	Stack
		-	Address space growth

Deadlock
	-	arrangements of events and dependencies that prevent all forward progress

Hierarchical file systems
	-	

Interprocess communication
	-	Processes exchange information
	-	networking, write to a file
	-	pipe (special file): A writes into pipe, B reads from it
		-	everything is a file
		-	just use it as a file

System calls
	-	OS runs in priviliged mode
	-	Programs want the OS to perform a service
	-	Accomplished by a system call
	-	entirely controlled by called not callee
	-	not like a normal function call

Making a system call
	-	can only designate which number call you want to make
	-	system call
	-	program pushes arguments, calls library
	-	library sets up trap,calls OS
	-	OS has handlers to handle the system call
	-	control returns to llibrary
	-	library returns to user program
	-	heavy operations - not fast

System calls for files and directories
	-	

More system calls
	-	create a process, etc.
	-	shell vs parent
	-	fork -> child, clone, or parent
		-	0 is child
		-	number - pid of your child

A simple shell

while (TRUE) { /* repeat forever */
	print_prompt( ); /* display prompt */
	read_command (command, parameters) /* input from terminal */
	if (fork() != 0) { /* fork off child process */
		/* Parent code */
		waitpid( -1, &status, 0); /* wait for child to exit */
	} else {
		/* Child code */
		execve (command, parameters, 0); /* execute command */
	}
}

Basic shell: accept a command, launch program, wait for it to return
	-	launch shell from within the shell?

Monolithic OS structure
	-	what goes into the kernel? Everything
	-	All of the OS is one big "program"
	-	Sometimes modular
		-	can dynamically add pieces, extra pieces become part of the whole
	-	Easy to write, byt harder to get right
	-	Microkernel architecture - OS is outside of the kernel
		-	small kernel
	-	Monolithic - everything inside the kernel

Virtualk Machine
	-	guest OS - can crash without harming underlying OS
		-	only VM fails
	-	guest OS can use raw hardware
		-	virtual machines keeps things separated
	-	resource manager with no abstraction
		-	OS that does half its job
	-	VM operating system