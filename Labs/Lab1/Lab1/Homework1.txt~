Matthew Koken
Homework 1

for (i=1; i < 6; i++) fork();

Each call of fork() will split the current process into 2 processes. So the first run will create two processes and have 5 more iterations to complete. The same will continue with each subsequent process that will run, until i reaches 6 for all started processes. Since each process creates new branches, this can be viewed as a tree. Each time a fork is called, the current node is broken into 2 child nodes - a binary tree. Given a binary tree, at i=1, there is 1, at i=2 there is 2^1=2... So for each iteration we have 2(n-1). Using the sum formula, we have a total of 1(2^n-1)/2-1) processes. ( This gives, from the original process, (2^n)-1 = (2^6)-1 additional processes that have been started. Including the original process, there will be a total of 64 processes that run.

To test this, you can run the loop and write all unique process id's to a text file. This should give (2^6)-1, or 63 unique addresses. Confirming this result, the unique process id's are listed below. In total, there are (as expected) 63 unique addresses.
18617
18618
18619
18620
18621
18622
18623
18624
18625
18626
18627
18628
18629
18630
18631
18632
18633
18634
18635
18636
18637
18638
18639
18640
18641
18642
18643
18644
18645
18646
18647
18648
18649
18650
18651
18652
18653
18654
18655
18656
18657
18658
18659
18660
18661
18662
18663
18664
18665
18666
18667
18668
18669
18670
18671
18672
18673
18674
18675
18676
18677
18678
18679
